[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lighthouse-ai"
version = "0.1.0"
description = "Voice-driven web navigator for blind and low-vision users"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Lighthouse.ai Team", email = "team@lighthouse.ai"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Accessibility",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
]
requires-python = ">=3.9"
dependencies = [
    # Core web automation
    "selenium==4.15.2",
    "undetected-chromedriver==3.5.4",
    
    # Speech processing
    "faster-whisper==0.10.0",
    "webrtcvad==2.0.10",
    "pyttsx3==2.90",
    "pyaudio==0.2.11",
    "sounddevice==0.4.6",
    
    # Web framework
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",
    
    # HTTP and networking
    "httpx==0.25.2",
    "requests==2.31.0",
    
    # Data processing
    "pyyaml==6.0.1",
    "structlog==23.2.0",
    "rich==13.7.0",
    
    # Audio processing
    "librosa==0.10.1",
    "numpy==1.24.4",
    "scipy==1.11.4",
    
    # Browser automation extras
    "beautifulsoup4==4.12.2",
    "lxml==4.9.3",
    
    # Configuration and environment
    "python-dotenv==1.0.0",
    "click==8.1.7",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==7.4.3",
    "pytest-cov==4.1.0",
    "pytest-asyncio==0.21.1",
    "pytest-mock==3.12.0",
    
    # Code quality
    "black==23.11.0",
    "isort==5.12.0",
    "flake8==6.1.0",
    "mypy==1.7.1",
    "pre-commit==3.6.0",
    
    # Documentation
    "mkdocs==1.5.3",
    "mkdocs-material==9.4.8",
]

cloud = [
    # Optional cloud TTS providers
    "azure-cognitiveservices-speech==1.34.0",
    "google-cloud-texttospeech==2.16.3",
    "boto3==1.34.0",  # AWS Polly
]

all = [
    "lighthouse-ai[dev,cloud]"
]

[project.urls]
Homepage = "https://github.com/lighthouse-ai/lighthouse"
Documentation = "https://lighthouse-ai.readthedocs.io"
Repository = "https://github.com/lighthouse-ai/lighthouse.git"
Issues = "https://github.com/lighthouse-ai/lighthouse/issues"

[project.scripts]
lighthouse = "lighthouse.cli:main"
lighthouse-api = "lighthouse.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["lighthouse*"]

[tool.setuptools.package-data]
lighthouse = ["config/*.yaml", "config/*.yml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lighthouse"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "selenium.*",
    "TTS.*",
    "faster_whisper.*",
    "webrtcvad.*",
    "pyaudio.*",
    "sounddevice.*",
    "librosa.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["lighthouse"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
